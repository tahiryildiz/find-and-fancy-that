import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '@/hooks/useAuth';
import { supabase } from '@/integrations/supabase/client';
import { Wishlist, Category, Item } from '@/types/database';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, SelectSeparator } from '@/components/ui/select';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger
} from '@/components/ui/dropdown-menu';
import { 
  Plus, 
  ArrowLeft, 
  Heart, 
  ThumbsUp, 
  ExternalLink, 
  Edit, 
  Trash2, 
  ArrowDownAZ, 
  Calendar, 
  SortAsc, 
  SortDesc,
  Share2,
  Mail,
  Link,
  Pencil,
  Tags,
  Upload,
  X,
  LinkIcon
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

export default function WishlistManagement() {
  const { slug } = useParams<{ slug: string }>();
  const { user } = useAuth();
  const navigate = useNavigate();
  const [wishlist, setWishlist] = useState<Wishlist | null>(null);
  const [categories, setCategories] = useState<Category[]>([]);
  const [items, setItems] = useState<Item[]>([]);
  const [filteredItems, setFilteredItems] = useState<Item[]>([]);
  const [loading, setLoading] = useState(true);
  const [addItemOpen, setAddItemOpen] = useState(false);
  const [manageCategoriesOpen, setManageCategoriesOpen] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [sortBy, setSortBy] = useState<'newest'|'oldest'|'alphabetical'|'price-high'|'price-low'>('newest');
  const { toast } = useToast();

  // Category form state
  const [categoryForm, setCategoryForm] = useState({
    id: '',
    name: ''
  });
  
  // Selected category for edit/delete
  const [editingCategory, setEditingCategory] = useState<string | null>(null);
  
  // Add item form state
  const [itemForm, setItemForm] = useState({
    title: '',
    description: '',
    url: '',
    image_url: '',
    price: '',
    category_id: 'none'
  });

  useEffect(() => {
    if (slug && user) {
      fetchWishlistData();
    }
  }, [slug, user]);
  
  useEffect(() => {
    // Apply filtering and sorting when items, search query, or category selection changes
    let result = [...items];
    
    // Filter by category
    if (selectedCategory !== 'all') {
      result = result.filter(item => item.category_id === selectedCategory);
    }
    
    // Filter by search query
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      result = result.filter(item => 
        item.title.toLowerCase().includes(query) || 
        (item.description && item.description.toLowerCase().includes(query))
      );
    }
    
    // Apply sorting
    switch (sortBy) {
      case 'newest':
        result.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());
        break;
      case 'oldest':
        result.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());
        break;
      case 'alphabetical':
        result.sort((a, b) => a.title.localeCompare(b.title));
        break;
      case 'price-high':
        result.sort((a, b) => {
          const priceA = a.price ? parseFloat(a.price.replace(/[^0-9.]/g, '')) : 0;
          const priceB = b.price ? parseFloat(b.price.replace(/[^0-9.]/g, '')) : 0;
          return priceB - priceA;
        });
        break;
      case 'price-low':
        result.sort((a, b) => {
          const priceA = a.price ? parseFloat(a.price.replace(/[^0-9.]/g, '')) : 0;
          const priceB = b.price ? parseFloat(b.price.replace(/[^0-9.]/g, '')) : 0;
          return priceA - priceB;
        });
        break;
    }
    
    setFilteredItems(result);
  }, [items, selectedCategory, searchQuery, sortBy]);

  useEffect(() => {
    if (itemForm.category_id === 'new_category') {
      // Open the category management modal instead of using prompt
      setAddItemOpen(false); // Hide the add item modal first
      setTimeout(() => {
        // Then show the category management modal
        setManageCategoriesOpen(true);
        // Reset to no category for now
        setItemForm({...itemForm, category_id: 'none'});
      }, 100);
    }
  }, [itemForm.category_id]);

  const fetchWishlistData = async () => {
    try {
      // Fetch wishlist (ensure user owns it)
      const { data: wishlistData, error: wishlistError } = await supabase
        .from('wishlists')
        .select('*')
        .eq('slug', slug)
        .eq('user_id', user?.id)
        .single();

      if (wishlistError) {
        toast({
          title: 'Error',
          description: 'Wishlist not found or access denied.',
          variant: 'destructive',
        });
        navigate('/dashboard');
        return;
      }
      
      setWishlist(wishlistData);

      // Fetch categories
      const { data: categoriesData, error: categoriesError } = await supabase
        .from('categories')
        .select('*')
        .eq('wishlist_id', wishlistData.id)
        .order('name');

      if (categoriesError) throw categoriesError;
      setCategories(categoriesData || []);

      // Fetch items
      const { data: itemsData, error: itemsError } = await supabase
        .from('items')
        .select('*')
        .eq('wishlist_id', wishlistData.id)
        .order('created_at', { ascending: false });

      if (itemsError) throw itemsError;
      setItems(itemsData || []);

    } catch (error: any) {
      toast({
        title: 'Error',
        description: error.message,
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  const handleCategorySave = async (e: React.FormEvent) => {
    // Prevent default form submission behavior which would cause page refresh
    e.preventDefault();
    if (!categoryForm.name.trim()) {
      toast({
        title: 'Error',
        description: 'Please enter a category name.',
        variant: 'destructive',
      });
      return;
    }
    
    try {
      if (editingCategory) {
        // Update existing category
        const { error } = await supabase
          .from('categories')
          .update({ name: categoryForm.name.trim() })
          .eq('id', categoryForm.id);
        
        if (error) throw error;
        
        // Update local state
        setCategories(categories.map(cat => 
          cat.id === categoryForm.id ? { ...cat, name: categoryForm.name.trim() } : cat
        ));
        
        toast({
          title: 'Success',
          description: 'Category updated successfully.',
        });
      } else {
        // Add new category
        // Generate a slug from the category name
        const slug = categoryForm.name.trim()
          .toLowerCase()
          .replace(/[^a-z0-9]+/g, '-')
          .replace(/(^-|-$)/g, '');
          
        const { data, error } = await supabase
          .from('categories')
          .insert([{
            wishlist_id: wishlist?.id,
            name: categoryForm.name.trim(),
            slug: slug
          }])
          .select()
          .single();
        
        if (error) throw error;
        
        // Update local state
        setCategories([...categories, data]);
        
        toast({
          title: 'Success',
          description: 'Category added successfully.',
        });
      }
      
      // Reset form
      setCategoryForm({ id: '', name: '' });
      setEditingCategory(null);
      
    } catch (error: any) {
      toast({
        title: 'Error',
        description: error.message,
        variant: 'destructive',
      });
    }
  };
  
  const handleEditCategory = (category: Category) => {
    setCategoryForm({ id: category.id, name: category.name });
    setEditingCategory(category.id);
  };
  
  const handleDeleteCategory = async (categoryId: string) => {
    if (!confirm('Are you sure you want to delete this category? Items with this category will become uncategorized.')) {
      return;
    }
    
    try {
      // First update items to remove this category
      const { error: updateError } = await supabase
        .from('items')
        .update({ category_id: null })
        .eq('category_id', categoryId);
      
      if (updateError) throw updateError;
      
      // Then delete the category
      const { error: deleteError } = await supabase
        .from('categories')
        .delete()
        .eq('id', categoryId);
      
      if (deleteError) throw deleteError;
      
      // Update local state
      setCategories(categories.filter(cat => cat.id !== categoryId));
      setItems(items.map(item => 
        item.category_id === categoryId ? { ...item, category_id: null } : item
      ));
      
      toast({
        title: 'Success',
        description: 'Category deleted successfully.',
      });
      
    } catch (error: any) {
      toast({
        title: 'Error',
        description: error.message,
        variant: 'destructive',
      });
    }
  };

// Handle adding a new item to the wishlist
const handleAddItem = async (e: React.FormEvent) => {
  e.preventDefault();
  
  if (!itemForm.title.trim() || !itemForm.description.trim()) {
    toast({
      title: 'Error',
      description: 'Please fill in title and description.',
      variant: 'destructive',
    });
    return;
  }

  try {
    const { data, error } = await supabase
      .from('items')
      .insert([
        {
          wishlist_id: wishlist?.id,
          title: itemForm.title.trim(),
          description: itemForm.description.trim(),
          url: itemForm.url.trim() || null,
          image_url: itemForm.image_url.trim() || null,
          price: itemForm.price.trim() || null,
          category_id: itemForm.category_id === 'none' ? null : itemForm.category_id,
        }
      ])
      .select()
      .single();

    if (error) throw error;

    setItems([data, ...items]);
    setItemForm({
      title: '',
      description: '',
      url: '',
      image_url: '',
      price: '',
      category_id: 'none'
    });
    setAddItemOpen(false);

    toast({
      title: 'Success',
      description: 'Item added to wishlist!',
    });
  } catch (error: any) {
    toast({
      title: 'Error',
      description: error.message,
      variant: 'destructive',
    });
  }
};

// Handle deleting an item from the wishlist
const handleDeleteItem = async (itemId: string) => {
  if (!confirm('Are you sure you want to delete this item?')) return;
  
  try {
    const { error } = await supabase
      .from('items')
      .delete()
      .eq('id', itemId);
      
    if (error) throw error;
    
    setItems(items.filter(item => item.id !== itemId));
    
    toast({
      title: 'Success',
      description: 'Item deleted from wishlist.',
    });
  } catch (error: any) {
    toast({
      title: 'Error',
      description: error.message,
      variant: 'destructive',
    });
  }
};

const shareWishlist = (type: 'twitter' | 'facebook' | 'linkedin' | 'pinterest' | 'email' | 'copy') => {
  if (!wishlist) return;
  
  const url = `${window.location.origin}/w/${wishlist.slug}`;
  
  switch (type) {
    case 'twitter':
      window.open(`https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}&text=${encodeURIComponent(`Check out my wishlist: ${wishlist.title}`)}`, '_blank');
      break;
    case 'facebook':
      window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`, '_blank');
      break;
    case 'linkedin':
      window.open(`https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(url)}&title=${encodeURIComponent(wishlist.title)}`, '_blank');
      break;
    case 'pinterest':
      window.open(`https://pinterest.com/pin/create/button/?url=${encodeURIComponent(url)}&description=${encodeURIComponent(wishlist.title)}`, '_blank');
      break;
    case 'email':
      window.open(`mailto:?subject=${encodeURIComponent(`Check out my wishlist: ${wishlist.title}`)}&body=${encodeURIComponent(`I wanted to share my wishlist with you: ${url}`)}`, '_blank');
      break;
    case 'copy':
      navigator.clipboard.writeText(url);
      toast({
        title: "Link copied",
        description: "Share link copied to clipboard"
      });
      break;
  }
};

// Validate image URL
const validateImageUrl = (url: string) => {
  if (!url) return false;
  return /\.(jpeg|jpg|gif|png|webp|svg)$/i.test(url);
};

// Handle image file selection and upload to Supabase storage
const handleImageFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
  if (!e.target.files || e.target.files.length === 0) return;
  
  const file = e.target.files[0];
  
  // Validate file type
  if (!file.type.startsWith('image/')) {
    toast({
      title: 'Invalid file type',
      description: 'Please select an image file.',
      variant: 'destructive',
    });
    return;
  }
  
  // Validate file size (max 2MB)
  if (file.size > 2 * 1024 * 1024) {
    toast({
      title: 'File too large',
      description: 'Please select an image smaller than 2MB.',
      variant: 'destructive',
    });
    return;
  }
  
  const loadingToast = toast({
    title: 'Uploading image...',
    description: 'Please wait while we upload your image.',
  });
  
  try {
    // Create a unique filename
    const fileExt = file.name.split('.').pop();
    const fileName = `${Date.now()}.${fileExt}`;
    const filePath = wishlist ? `wishlist-${wishlist.id}/${fileName}` : `temp/${fileName}`;
    
    // Upload to Supabase Storage
    const { data, error } = await supabase.storage
      .from('images')
      .upload(filePath, file);
      
    if (error) {
      throw error;
    }
    
    // Get public URL for the uploaded image
    const { data: { publicUrl } } = supabase.storage
      .from('images')
      .getPublicUrl(filePath);
    
    // Set the image URL in the form
    setItemForm({...itemForm, image_url: publicUrl});
    
    toast({
      title: 'Image uploaded',
      description: 'Image was uploaded successfully.',
    });
  } catch (error: any) {
    console.error('Error uploading image:', error);
    
    // Fall back to local preview if upload fails
    const objectUrl = URL.createObjectURL(file);
    setItemForm({...itemForm, image_url: objectUrl});
    
    toast({
      title: 'Upload failed',
      description: error.message || 'Using local preview instead. The image will only be visible temporarily.',
      variant: 'destructive',
    });
  }
};

// Function to fetch categories (centralized for reuse)
const fetchCategories = async () => {
  if (wishlist) {
    // Fetch categories
    const { data: categoriesData, error: categoriesError } = await supabase
      .from('categories')
      .select('*')
      .eq('wishlist_id', wishlist.id)
      .order('name');

    if (!categoriesError) {
      setCategories(categoriesData || []);
    }
  }
};

// Return the component JSX
return (
  <div className="container mx-auto py-6 px-4 sm:px-6 max-w-6xl">
    {loading ? (
      <div className="flex justify-center items-center min-h-[60vh]">
        <p>Loading...</p>
      </div>
    ) : !wishlist ? (
      <div className="text-center py-16">
        <h2 className="text-lg mb-4">Wishlist not found</h2>
        <Button onClick={() => navigate('/dashboard')}>Back to Dashboard</Button>
      </div>
    ) : (
      <main>
        <h1 className="text-2xl font-bold mb-2">{wishlist.title}</h1>
        
        {/* Back Button & Main Actions */}
        <div className="flex justify-between items-center mb-6">
        <div className="flex gap-2">
          <Button
            onClick={() => navigate('/dashboard')}
            variant="outline"
            size="sm"
            className="gap-2"
          >
            <ArrowLeft className="h-4 w-4" /> Back
          </Button>
          
          <Button onClick={() => setAddItemOpen(true)} variant="default" size="sm" className="gap-2">
            <Plus className="h-4 w-4" /> Add Item
          </Button>
          
          <Button onClick={() => setManageCategoriesOpen(true)} variant="outline" size="sm" className="gap-2">
            <Tags className="h-4 w-4" /> Categories
          </Button>
        </div>
        
        {wishlist && (
          <div className="flex gap-2">
            <Button
              onClick={() => window.open(`/w/${wishlist.slug}`, '_blank')}
              variant="outline"
              size="sm"
              className="gap-1"
            >
              <ExternalLink className="h-4 w-4" /> View
            </Button>
            
            <Button
              onClick={() => shareWishlist('copy')}
              variant="outline"
              size="sm"
              className="gap-1"
            >
              <Share2 className="h-4 w-4" /> Share
            </Button>
            
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm" className="px-2">
                  <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M3.625 7.5C3.625 8.12132 3.12132 8.625 2.5 8.625C1.87868 8.625 1.375 8.12132 1.375 7.5C1.375 6.87868 1.87868 6.375 2.5 6.375C3.12132 6.375 3.625 6.87868 3.625 7.5ZM8.625 7.5C8.625 8.12132 8.12132 8.625 7.5 8.625C6.87868 8.625 6.375 8.12132 6.375 7.5C6.375 6.87868 6.87868 6.375 7.5 6.375C8.12132 6.375 8.625 6.87868 8.625 7.5ZM12.5 8.625C13.1213 8.625 13.625 8.12132 13.625 7.5C13.625 6.87868 13.1213 6.375 12.5 6.375C11.8787 6.375 11.375 6.87868 11.375 7.5C11.375 8.12132 11.8787 8.625 12.5 8.625Z" fill="currentColor" fillRule="evenodd" clipRule="evenodd"></path>
                  </svg>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem onClick={() => shareWishlist('twitter')}>
                  Twitter
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => shareWishlist('facebook')}>
                  Facebook
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => shareWishlist('linkedin')}>
                  LinkedIn
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => shareWishlist('pinterest')}>
                  Pinterest
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={() => shareWishlist('email')}>
                  <Mail className="h-4 w-4 mr-2" /> Email
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => shareWishlist('copy')}>
                  <Link className="h-4 w-4 mr-2" /> Copy Link
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        )}
      </div>

      {/* Action Buttons - Moved to top of page for better UI */}
      
      {/* Add Item Dialog */}
      <Dialog 
        open={addItemOpen} 
        onOpenChange={(open) => {
          // Only allow closing via explicit button actions, not by clicking outside
          if (open === false) {
            // If attempting to close, do nothing - this prevents outside clicks from closing
            return;
          }
          
          setAddItemOpen(open);
          if (!open) {
            // Reset form when closing
            setItemForm({
              title: '',
              description: '',
              url: '',
              image_url: '',
              price: '',
              category_id: 'none'
            });
          }
        }}
      >
  <DialogContent className="sm:max-w-[500px]">
    <DialogHeader>
      <DialogTitle>Add Item to Wishlist</DialogTitle>
      <DialogDescription>
        Add an item to your wishlist. Items with images and links are easier to share.
      </DialogDescription>
    </DialogHeader>
    <form onSubmit={handleAddItem} className="space-y-4">
      <div className="space-y-4">
        <div className="grid gap-2">
          <Label htmlFor="title">Title*</Label>
          <Input
            id="title"
            value={itemForm.title}
            onChange={(e) => setItemForm({...itemForm, title: e.target.value})}
            placeholder="e.g., Sony WH-1000XM4 Headphones"
          />
        </div>

        <div className="grid gap-2">
          <Label htmlFor="description">Description*</Label>
          <Textarea
            id="description"
            value={itemForm.description}
            onChange={(e) => setItemForm({...itemForm, description: e.target.value})}
            placeholder="Describe the item..."
            className="min-h-[100px]"
          />
        </div>

        <div className="grid gap-2">
          <Label htmlFor="url">Link to Product</Label>
          <Input
            id="url"
            value={itemForm.url}
            onChange={(e) => setItemForm({...itemForm, url: e.target.value})}
            placeholder="https://example.com/product"
          />
        </div>

        <div className="grid gap-2">
          <Label htmlFor="price">Price</Label>
          <Input
            id="price"
            value={itemForm.price}
            onChange={(e) => setItemForm({...itemForm, price: e.target.value})}
            placeholder="e.g., $299.99"
          />
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div className="grid gap-2">
            <Label htmlFor="image_url">Image URL</Label>
            <div className="space-y-3">
              {itemForm.image_url ? (
                <div className="relative w-full aspect-square bg-muted rounded-lg overflow-hidden border border-border shadow-sm">
                  <img 
                    src={itemForm.image_url} 
                    alt="Item preview" 
                    className="w-full h-full object-cover"
                    onError={() => setItemForm({...itemForm, image_url: ''})}
                  />
                  <div className="absolute inset-0 bg-black/40 opacity-0 hover:opacity-100 transition-opacity flex items-center justify-center">
                    <Button 
                      type="button"
                      variant="destructive" 
                      size="sm"
                      className="h-9 px-3 bg-white/90 hover:bg-white text-destructive shadow-lg"
                      onClick={() => setItemForm({...itemForm, image_url: ''})}
                    >
                      <X className="h-4 w-4 mr-1" /> Remove
                    </Button>
                  </div>
                </div>
              ) : (
                <div className="border-2 border-dashed border-muted-foreground/20 rounded-lg p-4 text-center hover:border-muted-foreground/40 transition-colors flex flex-col items-center justify-center min-h-[120px]">
                  <label htmlFor="image-upload" className="cursor-pointer w-full h-full flex flex-col items-center">
                    <div className="bg-gray-100 rounded-full p-3 mb-2">
                      <Upload className="h-6 w-6 text-muted-foreground/70" />
                    </div>
                    <span className="text-sm text-muted-foreground mb-1">Enter URL below or</span>
                    <span className="text-sm text-blue-500 font-medium hover:text-blue-700">Upload Image</span>
                    <input
                      id="image-upload"
                      type="file"
                      accept="image/*"
                      className="sr-only"
                      onChange={handleImageFileSelect}
                    />
                  </label>
                </div>
              )}
              
              <Input
                id="image_url"
                value={itemForm.image_url}
                onChange={(e) => {
                  const url = e.target.value;
                  setItemForm({...itemForm, image_url: url});
                }}

              placeholder="Enter image URL"
              />
            </div>
          </div>

          <div className="grid gap-2">
            <div className="flex items-center justify-between">
              <Label htmlFor="category_id">Category</Label>
              <Button 
                type="button" 
                variant="outline" 
                size="sm" 
                className="h-7 text-xs"
                onClick={() => {
                  setAddItemOpen(false); // Hide the add item modal
                  setTimeout(() => setManageCategoriesOpen(true), 100); // Open the categories modal
                }}
              >
                <Pencil className="h-3 w-3 mr-1" /> Manage
              </Button>
            </div>
            <Select
              value={itemForm.category_id}
              onValueChange={(value) => setItemForm({...itemForm, category_id: value})}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select a category" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="none">No Category</SelectItem>
                <SelectSeparator />
                {categories.map((category) => (
                  <SelectItem key={category.id} value={category.id}>{category.name}</SelectItem>
                ))}
                <SelectSeparator />
                <SelectItem value="new_category" className="text-primary">
                  + Create New Category
                </SelectItem>
              </SelectContent>
            </Select>
          </div>

<DialogFooter>
<Button type="button" variant="outline" onClick={() => setAddItemOpen(false)}>
Cancel
</Button>
<Button type="submit">Add to Wishlist</Button>
</DialogFooter>
</form>
</DialogContent>
</Dialog>

{/* Manage Categories Dialog */}
<Dialog 
open={manageCategoriesOpen} 
onOpenChange={(open) => {
if (!open) {
// Only close the dialog when explicitly requested
setManageCategoriesOpen(false);
// When we close, reset the form
setCategoryForm({ id: '', name: '' });
setEditingCategory(null);
// Refresh categories to ensure the add item modal has the latest
fetchCategories();
}
}}
>
<DialogContent 
className="sm:max-w-md" 
onInteractOutside={(e) => {
// Prevent closing when clicking outside
e.preventDefault();
}}
>
<DialogHeader>
<DialogTitle>Manage Categories</DialogTitle>
<DialogDescription>
Add, edit, or remove categories to organize your wishlist items.
</DialogDescription>
</DialogHeader>
<form onSubmit={handleCategorySave} className="space-y-4">
  <div className="space-y-4">
    <div className="grid gap-2">
      <Label htmlFor="category_name">
        {editingCategory ? 'Edit Category' : 'New Category'}
      </Label>
      <Input
        id="category_name"
        value={categoryForm.name}
        onChange={(e) => setCategoryForm({...categoryForm, name: e.target.value})}
        placeholder="e.g., Electronics, Books, Clothing"
      />
    </div>
                
    <div className="flex justify-end space-x-2">
      {editingCategory ? (
        <>
          <Button 
            type="button" 
            variant="ghost"
            onClick={() => {
              setCategoryForm({ id: '', name: '' });
              setEditingCategory(null);
            }}
          >
            Cancel Edit
          </Button>
          <Button type="submit">
            Update
          </Button>
        </>
      ) : (
        <Button type="submit">
          Add Category
        </Button>
      )}
    </div>
  </div>
                
  <div className="mt-6">
    <h4 className="text-sm font-medium mb-3">Existing Categories</h4>
    {categories.length === 0 ? (
      <p className="text-sm text-muted-foreground">
        No categories yet. Add your first category above.
      </p>
    ) : (
      <div className="space-y-2">
        {categories.map((category) => (
          <div key={category.id} className="flex justify-between items-center border rounded-md p-2">
            <span>{category.name}</span>
            <div className="flex space-x-1">
              <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={() => handleEditCategory(category)}
              >
                <Pencil className="h-4 w-4" />
              </Button>
              <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={() => handleDeleteCategory(category.id)}
              >
                <Trash2 className="h-4 w-4 text-destructive" />
              </Button>
            </div>
          </div>
        ))}
      </div>
    )}
  </div>
            
  <DialogFooter>
    <Button type="button" variant="outline" onClick={() => setManageCategoriesOpen(false)}>
      Done
    </Button>
  </DialogFooter>
</form>
        </DialogContent>
      </Dialog>

      {/* Search and Sort Controls */}
      <div className="flex flex-col md:flex-row gap-4 mb-6">
        <div className="relative flex-grow">
          <Input 
            placeholder="Search items..." 
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full pr-10"
          />
          {searchQuery && (
            <button
              onClick={() => setSearchQuery('')}
              className="absolute right-2 top-1/2 transform -translate-y-1/2 text-muted-foreground"
            >
              ×
            </button>
          )}
        </div>
        
        <div className="flex gap-2">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm" className="gap-2">
                <SortDesc className="h-4 w-4" />
                Sort by: {sortBy.charAt(0).toUpperCase() + sortBy.slice(1).replace('-', ' ')}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => setSortBy('newest')} className="gap-2">
                <Calendar className="h-4 w-4" /> Newest
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSortBy('oldest')} className="gap-2">
                <Calendar className="h-4 w-4" /> Oldest
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSortBy('alphabetical')} className="gap-2">
                <ArrowDownAZ className="h-4 w-4" /> A-Z
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSortBy('price-high')} className="gap-2">
                <SortDesc className="h-4 w-4" /> Price: High to Low
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSortBy('price-low')} className="gap-2">
                <SortAsc className="h-4 w-4" /> Price: Low to High
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
      
      {/* Category Filter - Only show if items exist */}
      {items.length > 0 && (
        <div className="flex flex-wrap gap-2 mb-6">
          <Button
            variant={selectedCategory === 'all' ? "default" : "outline"}
            size="sm"
            onClick={() => setSelectedCategory('all')}
          >
            All Items
          </Button>
          
          {categories.map((category) => (
            <Button
              key={category.id}
              variant={selectedCategory === category.id ? "default" : "outline"}
              size="sm"
              onClick={() => setSelectedCategory(category.id)}
            >
              {category.name}
            </Button>
          ))}
          
          <Button
            variant={selectedCategory === 'uncategorized' ? "default" : "outline"}
            size="sm"
            onClick={() => setSelectedCategory('uncategorized')}
          >
            Uncategorized
          </Button>
        </div>
      )}

      {/* Items Grid */}
      {items.length === 0 ? (
        <div className="text-center py-16 px-4">
          <div className="max-w-md mx-auto bg-muted/20 rounded-lg p-8 border border-border">
            <h2 className="text-xl font-medium mb-4">Get Started with Your Wishlist</h2>
            <p className="text-muted-foreground mb-6">Your wishlist is empty! Start by adding items or creating categories to organize your wishlist.</p>
            
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button onClick={() => setAddItemOpen(true)} className="gap-2">
                <Plus className="h-4 w-4" /> Add First Item
              </Button>
              <Button onClick={() => setManageCategoriesOpen(true)} variant="outline" className="gap-2">
                <Tags className="h-4 w-4" /> Create Categories
              </Button>
            </div>
          </div>
        </div>
      ) : filteredItems.length === 0 ? (
        <div className="text-center py-10">
          <p className="text-muted-foreground mb-4">No items found matching your filters.</p>
          <Button onClick={() => setAddItemOpen(true)} className="mr-2">
            <Plus className="mr-2 h-4 w-4" /> Add Item
          </Button>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredItems.map(item => (
            <Card key={item.id} className="overflow-hidden hover:shadow-md transition-shadow duration-300">
              {/* Item card content */}
              <div className="aspect-w-16 aspect-h-9 bg-muted relative">
                {item.image_url && (
                  <img 
                    src={item.image_url} 
                    alt={item.title} 
                    className="object-cover w-full h-full"
                  />
                )}
                {!item.image_url && (
                  <div className="flex items-center justify-center h-full bg-secondary/10">
                    <ExternalLink className="text-muted-foreground h-8 w-8" />
                  </div>
                )}
              </div>

              <CardContent className="p-4">
                <div className="flex justify-between items-start mb-2">
                  <h3 className="font-medium text-foreground">{item.title}</h3>
                  <div className="flex space-x-1">
                    <Button 
                      variant="ghost" 
                      size="sm"
                      className="h-8 w-8 p-0"
                      onClick={() => handleDeleteItem(item.id)}
                    >
                      <Trash2 className="h-4 w-4 text-muted-foreground" />
                    </Button>
                  </div>
                </div>
                <p className="text-sm text-muted-foreground mb-4 line-clamp-2">{item.description}</p>
                
                <div className="flex justify-between items-center">
                  <div className="flex items-center space-x-1">
                    <Badge variant="outline" className="text-xs">
                      {categories.find(c => c.id === item.category_id)?.name || 'Uncategorized'}
                    </Badge>
                    {item.price && (
                      <Badge variant="secondary" className="text-xs">
                        {item.price}
                      </Badge>
                    )}
                  </div>
                  
                  {item.url && (
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="h-7 w-7 p-0"
                      onClick={() => window.open(item.url, '_blank')}
                    >
                      <ExternalLink className="h-3 w-3" />
                    </Button>
                  )}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
      </main>
    )}
    </div>
  );
}