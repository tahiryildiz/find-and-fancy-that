import React, { useState, useEffect, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { supabase } from '../lib/supabaseClient';
import { useToast } from '../hooks/useToast';
import { PlusCircle, X, Pencil, Trash2, Share, ExternalLink, Search, ChevronDown } from 'lucide-react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../components/ui/dialog';
import { Button } from '../components/ui/button';
import { Input } from '../components/ui/input';
import { Card, CardContent, CardFooter } from '../components/ui/card';
import { Textarea } from '../components/ui/textarea';
import { Badge } from '../components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '../components/ui/dropdown-menu';

type ItemFormType = {
  id: string;
  title: string;
  description: string;
  url: string;
  image_url: string;
  price: string;
  brand: string;
  category_id: string;
};

type CategoryFormType = {
  id: string;
  name: string;
};

interface Wishlist {
  id: string;
  title: string;
  description: string;
  slug: string;
  user_id: string;
}

interface Category {
  id: string;
  name: string;
  slug: string;
  wishlist_id: string;
  created_at: string;
}

interface Item {
  id: string;
  title: string;
  description: string;
  url: string;
  image_url: string;
  price: string;
  brand: string;
  category_id: string;
  wishlist_id: string;
  created_at: string;
}

export default function WishlistManagement() {
  const { slug } = useParams();
  const navigate = useNavigate();
  const toast = useToast();

  // Main data state
  const [loading, setLoading] = useState(true);
  const [wishlist, setWishlist] = useState<Wishlist | null>(null);
  const [items, setItems] = useState<Item[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [categoryFilter, setCategoryFilter] = useState<string>('all');

  // Modal state
  const [addItemOpen, setAddItemOpen] = useState(false);
  const [manageCategoriesOpen, setManageCategoriesOpen] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [editingCategory, setEditingCategory] = useState<string | null>(null);

  // Form state
  const [itemForm, setItemForm] = useState<ItemFormType>({
    id: '',
    title: '',
    description: '',
    url: '',
    image_url: '',
    price: '',
    brand: '',
    category_id: 'none'
  });
  const [categoryForm, setCategoryForm] = useState<CategoryFormType>({
    id: '',
    name: ''
  });

  // Search and sort state
  const [searchTerm, setSearchTerm] = useState('');
  const [sortBy, setSortBy] = useState<'title' | 'date' | 'price'>('date');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');

  // Image upload state
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);

  useEffect(() => {
    if (slug) {
      fetchWishlistData();
    }
  }, [slug]);

  // Reset functions
  const resetItemForm = () => {
    setItemForm({
      id: '',
      title: '',
      description: '',
      url: '',
      image_url: '',
      price: '',
      brand: '',
      category_id: 'none'
    });
    setIsEditing(false);
    setImageFile(null);
    setImagePreview(null);
  };

  const resetCategoryForm = () => {
    setCategoryForm({
      id: '',
      name: ''
    });
    setEditingCategory(null);
  };

  // Main data fetching
  const fetchWishlistData = async () => {
    try {
      setLoading(true);
      
      // Get wishlist
      const { data: wishlistData, error: wishlistError } = await supabase
        .from('wishlists')
        .select('*')
        .eq('slug', slug)
        .single();
      
      if (wishlistError) throw wishlistError;
      if (!wishlistData) {
        navigate('/not-found');
        return;
      }
      
      setWishlist(wishlistData);
      
      // Get items
      const { data: itemsData, error: itemsError } = await supabase
        .from('items')
        .select('*')
        .eq('wishlist_id', wishlistData.id)
        .order('created_at', { ascending: false });
      
      if (itemsError) throw itemsError;
      setItems(itemsData || []);
      
      // Get categories
      const { data: categoriesData, error: categoriesError } = await supabase
        .from('categories')
        .select('*')
        .eq('wishlist_id', wishlistData.id)
        .order('name');
      
      if (categoriesError) throw categoriesError;
      setCategories(categoriesData || []);
      
    } catch (error) {
      toast({ 
        title: "Error loading wishlist", 
        description: "Failed to load wishlist data. Please try again.", 
        variant: "destructive" 
      });
      console.error("Error fetching wishlist data:", error);
    } finally {
      setLoading(false);
    }
  };
