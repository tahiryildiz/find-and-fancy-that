  // Item CRUD operations
  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setImageFile(file);
      const reader = new FileReader();
      reader.onload = (event) => {
        setImagePreview(event.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const uploadImage = async (file: File): Promise<string> => {
    try {
      const fileExt = file.name.split('.').pop();
      const fileName = `${wishlist!.id}/${Math.random().toString(36).substring(2)}.${fileExt}`;
      const { error: uploadError, data } = await supabase.storage
        .from('item-images')
        .upload(fileName, file);

      if (uploadError) throw uploadError;
      
      const { data: { publicUrl } } = supabase.storage
        .from('item-images')
        .getPublicUrl(fileName);
      
      return publicUrl;
    } catch (error) {
      console.error('Error uploading image:', error);
      throw new Error('Failed to upload image');
    }
  };

  const handleSaveItem = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!itemForm.title) {
      toast({ 
        title: "Missing information", 
        description: "Please provide at least a title for your item", 
        variant: "destructive" 
      });
      return;
    }
    
    try {
      let imageUrl = itemForm.image_url;
      
      // Upload image if there's a new file
      if (imageFile) {
        imageUrl = await uploadImage(imageFile);
      }
      
      if (isEditing) {
        // Update existing item
        const { error } = await supabase
          .from('items')
          .update({
            title: itemForm.title,
            description: itemForm.description,
            url: itemForm.url,
            image_url: imageUrl,
            price: itemForm.price,
            brand: itemForm.brand,
            category_id: itemForm.category_id === 'none' ? null : itemForm.category_id,
          })
          .eq('id', itemForm.id);
        
        if (error) throw error;
        
        // Update local state
        setItems(prevItems => prevItems.map(item => 
          item.id === itemForm.id ? 
            {...item, ...itemForm, image_url: imageUrl, category_id: itemForm.category_id === 'none' ? null : itemForm.category_id} : 
            item
        ));
        
        toast({ 
          title: "Item updated", 
          description: "Item has been updated successfully" 
        });
      } else {
        // Add new item
        const { data, error } = await supabase
          .from('items')
          .insert([{
            wishlist_id: wishlist!.id,
            title: itemForm.title,
            description: itemForm.description,
            url: itemForm.url,
            image_url: imageUrl,
            price: itemForm.price,
            brand: itemForm.brand,
            category_id: itemForm.category_id === 'none' ? null : itemForm.category_id,
          }])
          .select()
          .single();
        
        if (error) throw error;
        
        // Update local state
        setItems(prevItems => [data, ...prevItems]);
        
        toast({ 
          title: "Item added", 
          description: "New item added to your wishlist" 
        });
      }
      
      // Reset form and close modal
      resetItemForm();
      setAddItemOpen(false);
      
    } catch (error) {
      console.error('Error saving item:', error);
      toast({ 
        title: "Error", 
        description: `Failed to ${isEditing ? 'update' : 'add'} item`, 
        variant: "destructive" 
      });
    }
  };

  const handleDeleteItem = async (itemId: string) => {
    const confirmed = window.confirm('Are you sure you want to delete this item?');
    if (!confirmed) return;
    
    try {
      const { error } = await supabase
        .from('items')
        .delete()
        .eq('id', itemId);
      
      if (error) throw error;
      
      // Update local state
      setItems(prev => prev.filter(i => i.id !== itemId));
      
      toast({ 
        title: "Item deleted", 
        description: "Item has been removed from your wishlist" 
      });
    } catch (error) {
      console.error('Error deleting item:', error);
      toast({ 
        title: "Error", 
        description: "Failed to delete item", 
        variant: "destructive" 
      });
    }
  };

  const handleEditItem = (item: Item) => {
    setItemForm({
      id: item.id,
      title: item.title,
      description: item.description || '',
      url: item.url || '',
      image_url: item.image_url || '',
      price: item.price || '',
      brand: item.brand || '',
      category_id: item.category_id || 'none'
    });
    setIsEditing(true);
    setAddItemOpen(true);
    // Set image preview if there's an image URL
    if (item.image_url) {
      setImagePreview(item.image_url);
    }
  };

  // Category CRUD operations
  const handleSaveCategory = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!categoryForm.name.trim()) {
      toast({ 
        title: "Missing information", 
        description: "Please provide a category name", 
        variant: "destructive" 
      });
      return;
    }
    
    try {
      if (editingCategory) {
        // Update existing category
        const { error } = await supabase
          .from('categories')
          .update({ 
            name: categoryForm.name.trim() 
          })
          .eq('id', editingCategory);
        
        if (error) throw error;
        
        // Update local state
        setCategories(prevCategories => 
          prevCategories.map(cat => 
            cat.id === editingCategory ? 
              { ...cat, name: categoryForm.name.trim() } : 
              cat
          )
        );
        
        toast({ 
          title: "Category updated", 
          description: "Category has been updated successfully" 
        });
      } else {
        // Add new category
        const { data, error } = await supabase
          .from('categories')
          .insert([{
            wishlist_id: wishlist!.id,
            name: categoryForm.name.trim(),
            slug: categoryForm.name.trim().toLowerCase().replace(/\s+/g, '-')
          }])
          .select()
          .single();
        
        if (error) throw error;
        
        // Update local state
        setCategories(prevCategories => [...prevCategories, data]);
        
        toast({ 
          title: "Category added", 
          description: "New category added to your wishlist" 
        });
      }
      
      // Reset form
      resetCategoryForm();
      
    } catch (error) {
      console.error('Error saving category:', error);
      toast({ 
        title: "Error", 
        description: `Failed to ${editingCategory ? 'update' : 'add'} category`, 
        variant: "destructive" 
      });
    }
  };

  const handleDeleteCategory = async (categoryId: string) => {
    const confirmed = window.confirm('Are you sure you want to delete this category? Items in this category will be uncategorized.');
    if (!confirmed) return;
    
    try {
      // First update items to remove category association
      const { error: itemsError } = await supabase
        .from('items')
        .update({ category_id: null })
        .eq('category_id', categoryId);
      
      if (itemsError) throw itemsError;
      
      // Then delete the category
      const { error: categoryError } = await supabase
        .from('categories')
        .delete()
        .eq('id', categoryId);
      
      if (categoryError) throw categoryError;
      
      // Update local state
      setCategories(prev => prev.filter(c => c.id !== categoryId));
      setItems(prev => prev.map(item => 
        item.category_id === categoryId ? { ...item, category_id: null } : item
      ));
      
      if (editingCategory === categoryId) {
        resetCategoryForm();
      }
      
      toast({ 
        title: "Category deleted", 
        description: "Category has been removed from your wishlist" 
      });
      
    } catch (error) {
      console.error('Error deleting category:', error);
      toast({ 
        title: "Error", 
        description: "Failed to delete category", 
        variant: "destructive" 
      });
    }
  };

  const handleEditCategory = (category: Category) => {
    setCategoryForm({
      id: category.id,
      name: category.name
    });
    setEditingCategory(category.id);
  };

  // Share functions
  const handleShareLink = () => {
    if (!wishlist) return;
    
    const shareUrl = `${window.location.origin}/wishlist/${wishlist.slug}`;
    navigator.clipboard.writeText(shareUrl);
    toast({ 
      title: "Link copied", 
      description: "Wishlist link copied to clipboard" 
    });
  };

  const handleShareEmail = () => {
    if (!wishlist) return;
    
    const shareUrl = `${window.location.origin}/wishlist/${wishlist.slug}`;
    const subject = `Check out my wishlist: ${wishlist.title}`;
    const body = `I wanted to share my wishlist "${wishlist.title}" with you. You can view it here: ${shareUrl}`;
    
    window.open(`mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`);
  };
